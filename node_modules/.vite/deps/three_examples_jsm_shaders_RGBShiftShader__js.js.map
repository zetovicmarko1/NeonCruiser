{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/RGBShiftShader.js"],
  "sourcesContent": ["/**\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\n\r\nconst RGBShiftShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'tDiffuse': { value: null },\r\n\t\t'amount': { value: 0.005 },\r\n\t\t'angle': { value: 0.0 }\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tuniform float amount;\r\n\t\tuniform float angle;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\r\n\t\t\tvec4 cr = texture2D(tDiffuse, vUv + offset);\r\n\t\t\tvec4 cga = texture2D(tDiffuse, vUv);\r\n\t\t\tvec4 cb = texture2D(tDiffuse, vUv - offset);\r\n\t\t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { RGBShiftShader };\r\n"],
  "mappings": ";AAUA,IAAM,iBAAiB;AAAA,EAEtB,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,UAAU,EAAE,OAAO,KAAM;AAAA,IACzB,SAAS,EAAE,OAAO,EAAI;AAAA,EAEvB;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWxB;AAAA;AAAA,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB3B;",
  "names": []
}
